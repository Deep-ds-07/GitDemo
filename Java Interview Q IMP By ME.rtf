{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset0 Cambria Math;}{\f2\fnil\fcharset1 Cambria Math;}}
{\*\generator Riched20 10.0.22621}{\*\mmathPr\mmathFont1\mwrapIndent1440 }\viewkind4\uc1 
\pard\sa200\sl240\slmult1\f0\fs24\lang9\par
\b Here are 25 common interview questions \b0 for a fresher Java developer along with their ideal answers:\par
\b\par
1. What is Java\b0 ?\par
Answer: Java is a high-level, object-oriented programming language developed by Sun Microsystems. It is platform-independent, \{meaning code written in Java can run on any device that supports the Java Virtual Machine (JVM)\}.\par
\par
\b 2. What are the main features of Java\b0 ?\par
Answer: The main features of Java are:\par
Object-Oriented\par
Platform Independent\par
Simple\par
Secure\par
Robust\par
Multithreaded\par
High Performance through Just-In-Time (JIT) compiler\b\par
3. What is the JDK, JRE, and JVM?\par
\b0 Answer:\par
JDK (Java Development Kit): A software development environment used for developing Java applications.\par
JRE (Java Runtime Environment): Provides libraries and other components to run applications written in Java.\par
JVM (Java Virtual Machine): Responsible for executing Java bytecode.\par
\b 4. Explain the difference between a JDK and a JRE.\par
\b0 Answer:\par
JDK: Contains tools required for Java development (compiler, debugger, etc.) and JRE.\par
JRE: Only provides the environment to run Java programs, but you cannot develop Java applications with it.\par
\b 5. What is an Object in Java?\par
\b0 Answer: An object is an instance of a class that contains state (attributes) and behavior (methods). Objects interact with each other to perform actions.\par
\par
\b 6. What is a Class in Java?\par
\b0 Answer: A class is a blueprint from which individual objects are created. It defines properties (fields) and methods to manipulate those properties.\par
\par
\b 7. What is the difference between a constructor and a method?\par
\b0 Answer:\par
Constructor: Used to initialize objects, called when an object is created. It has no return type and its name is the same as the class.\par
Method: A function defined inside a class that performs a specific action. It has a return type and can have the same name as the class but does not initialize objects.\par
\b 8. What is inheritance in Java?\par
\b0 Answer: Inheritance is a mechanism where a new class inherits the properties and behaviors of an existing class, allowing for code reuse and logical hierarchy.\par
\par
\b 9. What is polymorphism?\par
\b0 Answer: Polymorphism allows one entity (method or object) to take many forms. In Java, it is mainly achieved by method overloading (compile-time polymorphism) and method overriding (runtime polymorphism).\par
\par
\b 10. Explain method overloading and method overriding.\par
\b0 Answer:\par
Method Overloading: Defining multiple methods with the same name but different parameter lists in the same class.\par
Method Overriding: Defining a method in a subclass with the same name and signature as a method in the parent class to provide a specific implementation.\par
\b 11. What are access modifiers in Java?\par
\b0 Answer: Access modifiers determine the scope of variables, methods, and classes. The four types are:\par
public: Accessible from any other class.\par
private: Accessible only within the same class.\par
protected: Accessible within the same package or subclasses.\par
default (no modifier): Accessible within the same package.\par
\b 12. What is the difference between abstract class and interface?\par
\b0 Answer:Abstract class: Can have both abstract methods (methods without body) and concrete methods. A class can inherit only one abstract class.\par
Interface: Can only have abstract methods (until Java 8 introduced default and static methods). A class can implement multiple interfaces.\par
\b 13. What is the \lquote final\rquote  keyword in Java?\par
\b0 Answer:\par
final class: Cannot be subclassed.\par
final method: Cannot be overridden.\par
final variable: Value cannot be changed (constant).\par
\b 14. What is a static method?\par
\b0 Answer: A static method belongs to the class rather than any object. It can be called without creating an instance of the class.\par
\par
\b 15. What are Strings in Java?\par
\b0 Answer: Strings in Java are objects that represent a sequence of characters. Strings are immutable, meaning once created, they cannot be modified.\par
\par
\b 16. What is the difference between String, StringBuilder, and StringBuffer?\par
\b0 Answer:\par
String: Immutable sequence of characters.\par
StringBuilder: Mutable and not synchronized (not thread-safe), better performance for single-threaded environments.\par
StringBuffer: Mutable and synchronized (thread-safe), used in multithreaded environments.\par
\b 17. What are exceptions in Java?\par
\b0 Answer: Exceptions are events that occur during the execution of a program and disrupt the normal flow. Java provides a robust way to handle exceptions using try-catch blocks.\par
\b 18. What is the difference between checked and unchecked exceptions?\par
\b0 Answer:\par
Checked exceptions: Must be handled at compile time (e.g., IOException).\par
Unchecked exceptions: Occur at runtime and can be ignored during compilation (e.g., NullPointerException).\par
\b 19. What is the difference between \lquote throw\rquote  and \lquote throws\rquote ?\par
\b0 Answer:\par
throw: Used to explicitly throw an exception.\par
throws: Used in method signatures to declare that the method might throw exceptions.\par
\b 20. What are Collections in Java?\par
\b0 Answer: Collections in Java are frameworks that provide architecture to store and manipulate a group of objects. It includes interfaces like List, Set, Queue, and Map.\par
\par
\b 21. What is the difference between ArrayList and LinkedList?\par
\b0 Answer:\par
ArrayList: Uses a dynamic array to store elements. It provides fast random access but is slower for insertions and deletions.\par
LinkedList: Uses a doubly linked list. It is faster for insertions and deletions but slower for random access.\par
\b 22. What is a HashMap in Java?\par
\b0 Answer: HashMap is a part of the Java Collections framework and implements the Map interface. It stores key-value pairs and allows fast retrieval by keys, but does not maintain order.\par
\par
\b 23. What is garbage collection in Java?\par
\b0 Answer: Garbage collection in Java is the process of automatically freeing up memory by removing objects that are no longer in use. It helps prevent memory leaks.\par
\par
\b 24. What is the \lquote this\rquote  keyword in Java?\par
\b0 Answer: The this keyword refers to the current instance of the class. It is used to differentiate between class attributes and parameters, or to invoke other constructors within the class.\par
\par
\b 25. What is multithreading in Java?\par
\b0 Answer: Multithreading is the process of executing multiple threads simultaneously. It helps in performing multiple tasks concurrently, improving the performance of applications.\ul\par
\ulnone\lang1033 ================================================================================================================================================================\par
\par
Preparing\f1  \f0 for\f1  \f0 an\f1  \f0 interview\f1  \f0 as\f1  \f0 a\f1  \f0 fresher\f1  \f0 Java\f1  \f0 Developer\f1 , \f0 especially\f1  \f0 with\f1  \f0 a\f1  \b\f0 Non\f1 -\f0 IT\f1  \f0 background\f1 , \f0 can\f1  \f0 be\f1  \f0 a\f1  \f0 bit\f1  \f0 challenging\b0\f1 . \f0 However\f1 , \f0 understanding\f1  \f0 key\f1  \f0 concepts\f1  \f0 and\f1  \f0 presenting\f1  \f0 your\f1  \f0 knowledge\f1  \f0 clearly\f1  \f0 can\f1  \f0 help\f1  \f0 you\f1  \f0 succeed\f1 . \f0 Here's\f1  \f0 a\f1  \f0 list\f1  \f0 of\b\f1  \f0 50\f1  \f0 essential\f1  \f0 Java\f1  \f0 interview\f1  \f0 questions\f1  \b0\f0 with\f1  \f0 answers\f1  \f0 tailored\f1  \f0 to\f1  \f0 help\f1  \f0 someone\f1  \f0 from\f1  \f0 a\f1  \f0 non\f1 -\f0 IT\f1  \f0 background\f1 :\f0\par
\par
\b 1. What is Java?\b0\par
\b Answer:  \b0 Java is a high-level, class-based, object-oriented programming language that is designed to be platform-independent. This means that Java code can be written once and run anywhere (WORA), provided there is a Java Runtime Environment (JRE) installed. Java is widely used for building server-side applications, mobile applications, desktop applications, and embedded systems.\par
\par
\b 2. What is the difference between JDK, JRE, and JVM?\b0\par
\b Answer: \b0 JDK (Java Development Kit): A software development environment used for developing Java applications. It includes tools like the compiler (javac), debugger, and other utilities necessary for development.\par
JRE (Java Runtime Environment): A package that provides the libraries, Java Virtual Machine (JVM), and other components to run applications written in Java.\par
JVM (Java Virtual Machine): Part of the JRE, it is responsible for executing Java bytecode (the compiled form of Java programs).\par
\b 3. What are the main features of Java?\par
Answer\b0 :  Platform Independent: Java programs can run on any platform that has a JVM.\par
Object-Oriented: Everything in Java revolves around objects and classes.\par
Robust: Java provides strong memory management and exception handling.\par
Multithreaded: Java allows concurrent execution of multiple parts of a program to maximize CPU utilization.\par
Secure: Java programs run inside a virtual machine, which provides a layer of security, and it has inbuilt security features like cryptography, access control, and more.\par
\b 4. What is a Class in Java?\par
Answer: \b0 A class in Java is a blueprint for creating objects. It defines a set of properties (fields) and behaviors (methods) that the objects created from the class will have. For example, a Car class may have fields like speed and color, and methods like accelerate() and brake().\par
\par
\b 5. What is an Object in Java?\b0\par
\b Answer: \b0 An object is an instance of a class. It is a physical entity that occupies space in memory and contains properties and behaviors defined by its class. For example, you can create an object of the Car class like this: Car myCar = new Car();.\par
\par
\b 6. What is Object-Oriented Programming (OOP)?\par
Answer: \b0 OOP is a programming paradigm that uses objects and classes. Its key principles are:\par
Encapsulation: Grouping related data and methods into a single unit.\par
Inheritance: Allowing a class to inherit properties and behaviors from another class.\par
Polymorphism: Providing a way to perform the same operation in different forms.\par
Abstraction: Hiding the internal implementation and exposing only the necessary details.\par
\b 7. What is Encapsulation?\b0\par
\b Answer\b0 : Encapsulation is the practice of bundling data (fields) and methods that operate on the data into a single unit, typically a class. It restricts direct access to some of the object\rquote s components, which means that the internal details of how an object operates are hidden from the outside world. This is achieved using access modifiers like private and public.\par
\b\par
8. What is Inheritance?\par
Answer\b0 : Inheritance allows one class (child class or subclass) to inherit fields and methods from another class (parent class or superclass). This promotes code reuse and a hierarchical classification. For example, a Dog class can inherit from an Animal class, which means Dog will automatically have properties and behaviors of Animal unless overridden.\par
\b\par
9. What is Polymorphism?\par
Answer: \b0 Polymorphism means "many forms" and allows a single method or operator to behave differently based on the object that invokes it. There are two types of polymorphism:\par
Compile-time polymorphism (Method Overloading): Same method name but different parameter lists.\par
Run-time polymorphism (Method Overriding): A subclass provides a specific implementation of a method already defined in its superclass.\par
\b 10. What is Abstraction?\par
Answer:  \b0 Abstraction refers to hiding the complex implementation details and exposing only the essential features of an object. In Java, abstraction is achieved using abstract classes and interfaces. Abstract classes can have both abstract and concrete methods, while interfaces can only contain abstract methods (until Java 8 introduced default methods).\par
\par
\b 11. What is the difference between a Constructor and a Method in Java?\par
Answer:  \b0 A constructor is a special type of method that is used to initialize an object. It has the same name as the class and does not have a return type.\par
A method performs operations or functions for an object and may return a value. Methods can be called explicitly, whereas a constructor is called automatically when an object is created.\par
\b 12. What is method overloading?\par
Answer: \b0 Method overloading allows a class to have multiple methods with the same name but different parameter lists. The method signature is distinguished by the number of parameters, their types, or the order of parameters. It is a way of implementing compile-time polymorphism.\par
\b\par
13. What is method overriding?\par
Answer: \b0 Method overriding allows a subclass to provide a specific implementation for a method that is already defined in its parent class. The method in the subclass must have the same name, return type, and parameters as the method in the superclass. This allows for runtime polymorphism.\par
\par
\b 14. What is the 'this' keyword in Java?\par
Answer: \b0 The this keyword refers to the current object in a method or constructor. It is used to differentiate between instance variables and local variables when they have the same names. For example:\par
this.name = name;\par
\b 15. What is the difference between the 'this' and 'super' keywords?\par
Answer: \par
\b0 this refers to the current object instance.\par
super is used to refer to the parent class's members (fields, methods, or constructors). It is also used to invoke a superclass's constructor.\par
\b 16. What is a Static Method?\par
Answer: \b0 A static method belongs to the class rather than an instance of the class. It can be called without creating an object. Static methods can access static variables and other static methods but cannot directly access instance variables or methods.\par
\par
\b 17. What is a final variable in Java?\par
Answer\b0 : A final variable is a constant in Java. Once a final variable is initialized, it cannot be changed or reassigned. It is commonly used for defining constants.\par
\b\par
18. What is the difference between an abstract class and an interface?\par
Answer: \b0 Abstract Class: Can contain both abstract (unimplemented) and concrete (implemented) methods. It is used when there is a need for partial abstraction and when classes share a common base but also have their distinct behaviors.\par
Interface: Contains only abstract methods (until Java 8 introduced default methods). It defines a contract that other classes must implement.\par
\b 19. Can a class extend multiple classes in Java?\par
Answer: \b0 No, Java does not support multiple inheritance with classes to avoid ambiguity and complexity, like the diamond problem. However, a class can implement multiple interfaces.\par
\par
\b 20. Can a class implement multiple interfaces in Java?\par
Answer: \b0 Yes, a class in Java can implement multiple interfaces, allowing it to adhere to multiple contracts or behaviors.\par
\b\par
21. What is an Exception in Java?\par
Answer: \b0 An exception is an event that occurs during the execution of a program that disrupts its normal flow. Java uses a robust exception-handling mechanism to catch, handle, and prevent the program from crashing due to these unexpected events.\par
:\par
\b\par
22. What is the difference between Checked and Unchecked Exceptions?\par
Answer\b0    \par
Checked Exceptions: Exceptions that are checked at compile-time (e.g., IOException). These must be handled using a try-catch block or declared in the method signature using throws.\par
Unchecked Exceptions: Exceptions that occur at runtime (e.g., NullPointerException). These are not checked at compile time.\par
\b 23. What is a try-catch block in Java?\par
Answer: \b0 A try-catch block is used to handle exceptions. Code that might throw an exception is placed inside the try block, and the catch block handles the exception when it occurs.\par
\par
\b 24. What is the finally block in Java?\par
Answer: \b0 The finally block is executed after the try-catch block, regardless of whether an exception occurred. It is typically used to close resources like files, database connections, etc.\par
\par
\b 25. What is the difference between throw and throws in Java?\par
Answer:\par
T\b0 hrow is used to explicitly throw an exception from within a method.\par
throws is used in the method signature to declare that a method can throw an exception, indicating that the caller must handle it.\par
\b 26. What is a package in Java?\par
Answer: \b0 A package is a namespace that organizes related classes and interfaces. It helps to avoid naming conflicts and also provides controlled access to classes (via access modifiers).\par
\par
\b 27. What is the default access modifier in Java?\par
\b0 Answer: The default access modifier, also known as package-private, allows access only within the same package. No explicit keyword is required to declare the default access level.\par
\par
\b 28. What is a String in Java?\par
Answer: \b0 A String in Java is an object that represents a sequence of characters. Strings are immutable, which means once created, their value cannot be changed. If any modification is made to a String, a new String object is created.\par
\par
\b 29. What is the difference between String, StringBuffer, and StringBuilder?\par
Answer:\par
\b0 String: Immutable sequence of characters.\par
StringBuffer: Mutable sequence of characters, synchronized, and thread-safe.\par
StringBuilder: Mutable sequence of characters, not synchronized, and faster than StringBuffer in single-threaded environments.\par
\b 30. What is the use of the equals() method in Java?\par
Answer: \b0 The equals() method is used to compare two objects for equality based on their content, not their memory references.\par
\par
\b 31. What is the difference between == and equals()?\par
Answer:\par
\b0\par
== compares object references to check if they point to the same memory location.\par
equals() compares the content of the objects.\par
\b 32. What is garbage collection in Java?\par
Answer\b0 : Garbage collection is the process of automatically freeing memory by removing objects that are no longer in use. The JVM handles this process, so developers don\rquote t need to manually allocate or free memory.\par
\par
\b 33. What is the role of the finalize() method in Java?\par
Answer: \b0 The finalize() method is called by the garbage collector before an object is destroyed. It can be used to perform cleanup activities like closing resources. However, its execution is not guaranteed.\par
\b\par
34. What are the different types of loops in Java?\par
Answer:\par
\b0 for loop: Executes a block of code a specific number of times.\par
while loop: Repeats a block of code while a condition is true.\par
do-while loop: Similar to a while loop, but the condition is evaluated after the loop executes.\par
\b 35. What is a break statement in Java?\par
Answer: \b0 The break statement is used to terminate a loop or switch statement prematurely and transfer control to the statement immediately following it.\par
\par
\b 36. What is a continue statement in Java?\par
Answer: \b0 The continue statement skips the current iteration of the loop and moves to the next iteration.\par
\par
\b 37. What is an array in Java?\par
Answer: \b0 An array is a collection of elements of the same type, stored in contiguous memory locations. Each element can be accessed using an index.\par
\b\par
38. What is a 2D array in Java?\par
Answer: \b0 A 2D array is an array of arrays. It represents a table with rows and columns, and elements are accessed using two indices: one for the row and one for the column.\par
\par
\b 39. What is a constructor in Java?\par
Answer\b0 : A constructor is a special method used to initialize an object when it is created. It has the same name as the class and no return type. Constructors can be parameterized or default.\par
\par
\b 40. What is the difference between a default and parameterized constructor?\par
Answer:\b0\par
A default constructor does not take any parameters and provides default values for object initialization.\par
A parameterized constructor accepts arguments to initialize an object with specific values.\par
\b 41. What is an Interface in Java?\par
Answer: \b0 An interface is a reference type that contains abstract methods, which must be implemented by a class. It defines a contract or a set of methods that a class must follow but doesn\rquote t provide the method\rquote s implementation.\par
\par
\b 42. What is Multithreading in Java?\par
Answer: \b0 Multithreading is the capability of a CPU or a single core in a multi-core processor to execute multiple threads concurrently. Each thread runs a separate part of a program, allowing for faster execution by making better use of CPU resources.\par
\par
\b 43. What is the difference between wait(), sleep(), and notify() in Java?\par
Answer:\par
\b0 wait(): Causes a thread to wait until another thread calls notify() or notifyAll().\par
sleep(): Causes a thread to sleep for a specified period without releasing any locks.\par
notify(): Wakes up a single thread that is waiting on the object's monitor.\par
\b 44. What is synchronization in Java?\par
Answer: \b0 Synchronization is a mechanism to control access to shared resources in a multithreaded environment. It ensures that only one thread can access a resource at a time, thus avoiding data inconsistencies.\par
\par
\b 45. What are Wrapper Classes in Java?\par
Answer: \b0 Wrapper classes provide a way to use primitive data types (like int, char, boolean) as objects. Each primitive type has a corresponding wrapper class (e.g., Integer, Character, Boolean).\par
\b\par
46. What is Autoboxing and Unboxing in Java?\par
Answer:\b0\par
Autoboxing: Automatically converting a primitive type into its corresponding wrapper class (e.g., converting int to Integer).\par
Unboxing: Automatically converting a wrapper class object to its corresponding primitive type (e.g., converting Integer to int).\par
\b 47. What is a HashMap in Java?\par
Answer: \b0 A HashMap is a collection class that stores data in key-value pairs. It allows null keys and values and provides constant-time performance for the basic operations like get() and put().\par
\par
\b 48. What is the difference between HashMap and HashSet in Java?\par
Answer\b0 :\par
HashMap: Stores key-value pairs.\par
HashSet: Stores unique elements only, without any duplicates, and doesn\rquote t allow key-value mapping.\par
49. What is the Collections Framework in Java?\par
Answer: The Java Collections Framework provides a set of classes and interfaces to store and manipulate groups of data as a single unit. Examples include ArrayList, HashMap, LinkedList, etc.\par
\par
\b 50. What is the difference between ArrayList and LinkedList in Java?\par
Answer:\par
\b0 ArrayList: Resizable array-based implementation. It provides fast random access but slow insertions and deletions.\par
LinkedList: Doubly linked list implementation. It provides faster insertions and deletions but slower random access.\lang9\par
\lang1033 ================================================================================================================================================================\lang9\par
\b Here are 10 common Java programs \b0 that might be asked during interviews for a fresher Java developer position. Each program covers key concepts like loops, arrays, strings, and OOP:\par
\par
\b 1. Program to check if a number is prime\par
java\par
\ul Ans:\ulnone\b0\par
public class PrimeNumber \{\par
    public static void main(String[] args) \{\par
        int num = 29;\par
        boolean isPrime = true;\par
\par
        for (int i = 2; i <= num / 2; i++) \{\par
            if (num % i == 0) \{\par
                isPrime = false;\par
                break;\par
            \}\par
        \}\par
\par
        if (isPrime)\par
            System.out.println(num + " is a prime number.");\par
        else\par
            System.out.println(num + " is not a prime number.");\par
    \}\par
\}\par
\b 2. Program to find the factorial of a number\par
\ul Ans: \par
\ulnone\b0 public class Factorial \{\par
    public static void main(String[] args) \{\par
        int num = 5;\par
        int fact = 1;\par
\par
        for (int i = 1; i <= num; i++) \{\par
            fact *= i;\par
        \}\par
\par
        System.out.println("Factorial of " + num + " is: " + fact);\par
    \}\par
\}\par
\b 3. Program to check if a string is a palindrome\b0\par
\ul\b Ans:\par
\ulnone\b0 public class Palindrome \{\par
    public static void main(String[] args) \{\par
        String str = "madam";\par
        String reversedStr = new StringBuilder(str).reverse().toString();\par
\par
        if (str.equals(reversedStr))\par
            System.out.println(str + " is a palindrome.");\par
        else\par
            System.out.println(str + " is not a palindrome.");\par
    \}\par
\}\par
\b 4. Fibonacci series using iteration\par
\b0 java\par
\ul\b Ans:\ulnone\b0\par
public class Fibonacci \{\par
    public static void main(String[] args) \{\par
        int n = 10, first = 0, second = 1;\par
        System.out.print("Fibonacci Series: " + first + ", " + second);\par
\par
        for (int i = 2; i < n; i++) \{\par
            int next = first + second;\par
            System.out.print(", " + next);\par
            first = second;\par
            second = next;\par
        \}\par
    \}\par
\}\par
\b 5. Program to reverse an array\b0\par
\ul\b Ans:\ulnone\b0\par
import java.util.Arrays;\par
\par
public class ReverseArray \{\par
    public static void main(String[] args) \{\par
        int[] arr = \{1, 2, 3, 4, 5\};\par
        int n = arr.length;\par
        for (int i = 0; i < n / 2; i++) \{\par
            int temp = arr[i];\par
            arr[i] = arr[n - i - 1];\par
            arr[n - i - 1] = temp;\par
        \}\par
        System.out.println("Reversed Array: " + Arrays.toString(arr));\par
    \}\par
\}\par
\b 6. Program to find the largest element in an array\par
\ul Ans:\par
\ulnone\b0 public class LargestInArray \{\par
    public static void main(String[] args) \{\par
        int[] arr = \{2, 5, 9, 1, 7\};\par
        int max = arr[0];\par
\par
        for (int i = 1; i < arr.length; i++) \{\par
            if (arr[i] > max) \{\par
                max = arr[i];\par
            \}\par
        \}\par
\par
        System.out.println("Largest element in the array is: " + max);\par
    \}\par
\}\par
\b 7. Program to find if a number is Armstrong (e.g., 153)\par
\ul Ans:\par
\ulnone\b0 public class ArmstrongNumber \{\par
    public static void main(String[] args) \{\par
        int num = 153, sum = 0, temp = num;\par
\par
        while (temp != 0) \{\par
            int digit = temp % 10;\par
            sum += digit * digit * digit;\par
            temp /= 10;\par
        \}\par
\par
        if (sum == num)\par
            System.out.println(num + " is an Armstrong number.");\par
        else\par
            System.out.println(num + " is not an Armstrong number.");\par
    \}\par
\}\par
\b 8. Program to swap two numbers without using a third variable\par
\ul Ans:\par
\ulnone\b0 public class SwapNumbers \{\par
    public static void main(String[] args) \{\par
        int a = 5, b = 3;\par
\par
        a = a + b;\par
        b = a - b;\par
        a = a - b;\par
\par
        System.out.println("After swapping: a = " + a + ", b = " + b);\par
    \}\par
\}\par
\b 9. Program to check if a number is a palindrome\par
\ul Ans:\par
\ulnone\b0 public class PalindromeNumber \{\par
    public static void main(String[] args) \{\par
        int num = 121, reversedNum = 0, originalNum = num;\par
\par
        while (num != 0) \{\par
            int digit = num % 10;\par
            reversedNum = reversedNum * 10 + digit;\par
            num /= 10;\par
        \}\par
\par
        if (originalNum == reversedNum)\par
            System.out.println(originalNum + " is a palindrome number.");\par
        else\par
            System.out.println(originalNum + " is not a palindrome number.");\par
    \}\par
\}\par
\b 10. Program to find the second largest element in an array\par
\ul Ans:\par
\ulnone\b0 public class SecondLargest \{\par
    public static void main(String[] args) \{\par
        int[] arr = \{12, 35, 1, 10, 34, 1\};\par
        int first = Integer.MIN_VALUE, second = Integer.MIN_VALUE;\par
\par
        for (int i = 0; i < arr.length; i++) \{\par
            if (arr[i] > first) \{\par
                second = first;\par
                first = arr[i];\par
            \} else if (arr[i] > second && arr[i] != first) \{\par
                second = arr[i];\par
            \}\par
        \}\par
\par
        if (second == Integer.MIN_VALUE)\par
            System.out.println("No second largest element.");\par
        else\par
            System.out.println("The second largest element is " + second);\par
    \}\par
\}\par
These programs focus on commonly asked topics like loops, conditions, arrays, strings, and number manipulation, which are essential for a fresher Java developer to know.\par
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\par
ChatGPT\par
\b Here are 20 common programming questions \b0 that are often asked during interviews for Java developers:\par
\par
1. Write a Java program to check if a number is prime.\par
2. Write a program to find the factorial of a number using recursion.\par
3. Write a Java program to check if a string is a palindrome.\par
4. Write a Java program to print the Fibonacci series up to n terms.\par
5. Write a program to reverse an array without using a new array.\par
6. Write a Java program to find the second largest number in an array.\par
7. Write a program to sort an array using bubble sort.\par
8. Write a Java program to check if a number is an Armstrong number.\par
9. Write a program to swap two numbers without using a third variable.\par
10. Write a program to remove duplicate elements from an array.\par
11. Write a Java program to find the sum of digits of a number.\par
12. Write a program to find the GCD (Greatest Common Divisor) of two numbers.\par
13. Write a program to find the number of vowels and consonants in a given string.\par
14. Write a program to count the occurrence of each character in a string.\par
15. Write a Java program to implement binary search on a sorted array.\par
16. Write a program to find the missing number in an array containing numbers from 1 to n.\par
17. Write a Java program to reverse a string without using built-in functions.\par
18. Write a program to check if two strings are anagrams of each other.\par
19. Write a Java program to merge two sorted arrays into a single sorted array.\par
20. Write a program to print all prime numbers between two given numbers.\par
------------------------------------------------------------------------------------------------------------------------\par
\b Here are additional important Java programming questions \b0 that will help you understand core Java concepts and prepare for interviews:\par
1. Write a Java program to check if two strings are rotations of each other.\par
Hint: For example, "ABCD" and "DABC" are rotations of each other.\par
2. Write a program to find the longest palindrome substring in a given string.\par
Hint: For example, in "babad", the longest palindrome is "bab" or "aba".\par
3. Write a Java program to find the length of the longest substring without repeating characters.\par
Hint: For example, the input "abcabcbb" should return 3 ("abc").\par
4. Write a program to find all the permutations of a given string.\par
Hint: For example, the permutations of "ABC" are "ABC", "ACB", "BAC", "BCA", "CAB", "CBA".\par
5. Write a Java program to find the intersection of two arrays.\par
Hint: This means finding common elements between two arrays.\par
6. Write a program to implement a queue using two stacks.\par
Hint: Use two stacks to simulate the behavior of a queue (FIFO order).\par
7. Write a Java program to find the first non-repeating character in a string.\par
Hint: For example, in "swiss", the first non-repeating character is 'w'.\par
8. Write a program to find the maximum difference between two elements in an array where the larger element comes after the smaller one.\par
Hint: Example: In array \{2, 3, 10, 6, 4, 8, 1\}, the maximum difference is 8 (10 - 2).\par
9. Write a Java program to convert a binary number to a decimal number.\par
Hint: For example, the binary number "1010" is equal to the decimal number 10.\par
10. Write a program to implement a binary search tree (BST) and perform in-order, pre-order, and post-order traversal.\par
Hint: Implement BST insertion and the three tree traversals.\par
11. Write a program to remove all white spaces from a given string without using built-in methods.\par
Hint: Example: Input "Hello World" \f2\u8594?\f0  Output: "HelloWorld".\par
12. Write a Java program to find the Kth largest element in an unsorted array.\par
Hint: You can use sorting or a priority queue (min-heap) to solve this problem efficiently.\par
13. Write a program to implement a simple cache using the Least Recently Used (LRU) algorithm.\par
Hint: Implement LRU cache using a doubly linked list and a hash map.\par
14. Write a Java program to count the number of set bits (1s) in a binary representation of a number.\par
Hint: For example, the number 7 (111 in binary) has 3 set bits.\par
15. Write a program to implement a stack using a linked list.\par
Hint: Create a custom stack data structure using linked list implementation for push and pop operations.\par
16. Write a program to detect a loop in a linked list.\par
Hint: Use Floyd\rquote s Cycle-Finding Algorithm (also called Tortoise and Hare algorithm).\par
17. Write a Java program to find the median of two sorted arrays.\par
Hint: For example, for arrays [1, 3] and [2], the median is 2.\par
18. Write a program to check if a given binary tree is a binary search tree (BST).\par
Hint: Ensure the left child is less than the parent and the right child is greater than the parent, recursively.\par
19. Write a Java program to implement the Tower of Hanoi.\par
Hint: The Tower of Hanoi is a mathematical puzzle where you have three rods and n disks of different sizes.\par
20. Write a program to reverse the digits of an integer.\par
Hint: For example, the input 12345 should return 54321.\par
\par
==========================================================================================================\b THE  END\b0 ===========================\lang1033 ===\par
}
 